// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  watchlist     Watchlist[]
  portfolios    Portfolio[]
  aiInsights    AiInsight[]
  notifications Notification[]
  preferences   UserPreferences?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String?
  type      String   @default("stock") // stock, crypto, forex
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String   @default("My Portfolio")
  symbol      String
  quantity    Float
  buyPrice    Float
  currentPrice Float?
  totalValue  Float?
  profit      Float?
  profitPercent Float?
  type        String   @default("stock") // stock, crypto
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiInsight {
  id            String   @id @default(cuid())
  userId        String
  symbol        String
  title         String
  summary       String   @db.Text
  sentiment     String   // positive, negative, neutral
  confidence    Float    @default(0.5)
  sourceUrl     String?
  imageUrl      String?
  category      String   @default("general") // earnings, news, analysis
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      String   @default("info") // info, warning, success, error
  isRead    Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(false)
  darkMode              Boolean @default(false)
  currency              String  @default("USD")
  timezone              String  @default("UTC")
  portfolioUpdateFreq   String  @default("daily") // hourly, daily, weekly
  newsUpdateFreq        String  @default("daily")
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}