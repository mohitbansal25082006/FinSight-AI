// F:\finsight-ai\prisma\schema.prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  watchlist     Watchlist[]
  portfolios    Portfolio[]
  aiInsights    AiInsight[]
  notifications Notification[]
  preferences   UserPreferences?
  tradingStrategies TradingStrategy[]
  chatbotQueries ChatbotQuery[]
  chatbotConversations ChatbotConversation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String?
  type      String   @default("stock") // stock, crypto, forex
  addedAt   DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

model Portfolio {
  id          String   @id @default(cuid())
  userId      String
  name        String   @default("My Portfolio")
  symbol      String
  quantity    Float
  buyPrice    Float
  currentPrice Float?
  totalValue  Float?
  profit      Float?
  profitPercent Float?
  type        String   @default("stock") // stock, crypto
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiInsight {
  id            String   @id @default(cuid())
  userId        String
  symbol        String
  title         String
  summary       String   @db.Text
  sentiment     String   // positive, negative, neutral
  confidence    Float    @default(0.5)
  sourceUrl     String?
  imageUrl      String?
  category      String   @default("general") // earnings, news, analysis
  isRead        Boolean  @default(false)
  type          String   @default("comprehensive") // technical, fundamental, sentiment, comprehensive
  timeframe     String   @default("1m") // 1d, 1w, 1m, 3m, 6m, 1y
  keyPoints     Json?    // Array of key points
  prediction    String?  @db.Text
  riskFactors   Json?    // Array of risk factors
  opportunities  Json?    // Array of opportunities
  technicalIndicators Json? // Object with technical indicators
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String   @db.Text
  type      String   @default("info") // info, warning, success, error
  isRead    Boolean  @default(false)
  actionUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(false)
  darkMode              Boolean @default(false)
  currency              String  @default("USD")
  timezone              String  @default("UTC")
  portfolioUpdateFreq   String  @default("daily") // hourly, daily, weekly
  newsUpdateFreq        String  @default("daily")
  riskTolerance         String  @default("moderate") // conservative, moderate, aggressive
  investmentGoals       String  @default("growth") // growth, income, balanced
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New models for advanced features

model TradingStrategy {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String   @db.Text
  parameters  Json     // Strategy parameters as JSON
  performance Json?    // Performance metrics as JSON
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatbotQuery {
  id        String   @id @default(cuid())
  userId    String
  query     String   @db.Text
  response  String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PatternRecognition {
  id          String   @id @default(cuid())
  symbol      String
  patternType String   // head_and_shoulders, double_top, triangle, etc.
  confidence  Float
  detectedAt  DateTime @default(now())
  isValid     Boolean  @default(true)
  timeframe   String   @default("daily") // daily, weekly, monthly
}

model PricePrediction {
  id          String   @id @default(cuid())
  symbol      String
  modelType   String   // lstm, arima, prophet, etc.
  prediction  Float
  confidence  Float
  targetDate  DateTime
  createdAt   DateTime @default(now())
  actualPrice Float?
  accuracy    Float?
}

model SocialMediaSentiment {
  id          String   @id @default(cuid())
  symbol      String
  platform    String   // twitter, reddit, etc.
  sentiment   Float    // -1 to 1 scale
  mentions    Int
  createdAt   DateTime @default(now())
}

model FraudAlert {
  id          String   @id @default(cuid())
  symbol      String
  alertType   String   // pump_and_dump, wash_trading, etc.
  confidence  Float
  description String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}

model StockRecommendation {
  id          String   @id @default(cuid())
  userId      String
  symbol      String
  action      String   // buy, sell, hold
  confidence  Float
  reason      String   @db.Text
  priceTarget Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isRead      Boolean  @default(false)
}

model ChatbotConversation {
  id          String   @id @default(cuid())
  userId      String
  title       String?  @default("New Conversation")
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatbotMessage[]
}

model ChatbotMessage {
  id            String   @id @default(cuid())
  conversationId String
  role          String   // 'user' | 'assistant' | 'system'
  content       String   @db.Text
  data          Json?    // Additional data like charts, tables, etc.
  sources       Json?    // Source references
  confidence    Float?   // Confidence score for the response
  tokens        Int?     // Token count
  responseTime  Int?     // Response time in ms
  createdAt     DateTime @default(now())
  conversation  ChatbotConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model ChatbotKnowledge {
  id          String   @id @default(cuid())
  category    String   // 'market', 'stock', 'portfolio', 'technical', 'fundamental'
  title       String
  content     String   @db.Text
  keywords    String[] // Search keywords
  priority    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatbotTool {
  id          String   @id @default(cuid())
  name        String   // 'stock_price', 'portfolio_analysis', 'market_sentiment'
  description String
  parameters  Json     // Tool parameters schema
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}